[
    {
        "question": "The @main attribute (where the app begins) is found in...",
        "answer": "...App.swift",
        "options": ["...App.swift", "ContentView.swift", "Assets.xcassets", "PreviewContent.swift"],
        "learned": false
    },
    {
        "question": "The default view for an Xcode project is…",
        "answer": "ContentView.swift",
        "options": ["ContentView.swift", "...App.swift", "PreviewContent.swift", "ViewModel.swift"],
        "learned": false
    },
    {
        "question": "Single line comments in Swift are begun by...",
        "answer": "//",
        "options": ["/*", "//", "/(", "***"],
        "learned": false
    },
    {
        "question": "True or False: The line \"let num= 2\" creates a mutable variable with the value 2.",
        "answer": "False",
        "options": ["True", "False"],
        "learned": false
    },   {
        "question": "You can print the value of the variable \"var\" by using the format...",
        "answer": "print(\“var is \\(var)\”)",
        "options": ["print(\“var is \\(var)\”)", "print(\“var\”)", "print(\“var is /(var)\”)", "print(\“var is [var]\”)"],
        "learned": false
    },
    {
        "question": "True or False: Swift can infer the type of variables if they are initialized without an explicitly type declaration.",
        "answer": "True",
        "options": ["True", "False"],
        "learned": false
    },
    {
        "question": "A ___-while loop completes one iteration before checking the terminating condition.",
        "answer": "repeat",
        "options": ["repeat", "do", "for", "run"],
        "learned": false
    },
    {
        "question": "Which one of these is not a control-flow keyword for switch statements?",
        "answer": "repeat",
        "options": ["repeat", "continue", "break", "fallthrough"],
        "learned": false
    },
    {
        "question": "True or False: Cases in switch statements fall through to the next case unless they end with a break statement, like in Java or C.",
        "answer": "False",
        "options": ["True", "False"],
        "learned": false
    },
    {
        "question": "Guard statements are used for...",
        "answer": "Early exits if a condition is not met",
        "options": ["Early exits if a condition is not met", "An alternative to the if-then-else structure", "Protecting a variable from being modified", "Escorting the princess to safety"],
        "learned": false
    },
    {
        "question": "The syntax for specifying a return type for a function is...",
        "answer": "func getName() -> String {...}",
        "options": ["func getName() -> String {...}", "func String getName() {...}", "func getName() {...} -> String", "func getName() {...}.returns(String)"],
        "learned": false
    },
    {
        "question": "Choose the proper format for assigning data values in the declaration of a struct.",
        "answer": "Person(name: \"John\")",
        "options": ["Person(name: \"John\")", "Person(name = \"John\")", "Person(name -> \"John\")", "Person(name is \"John\")"],
        "learned": false
    },
    {
        "question": "Structs in Swift are passed by...",
        "answer": "Value",
        "options": ["Value", "Reference"],
        "learned": false
    },
    {
        "question": "The setter function on a computed property is triggered when...",
        "answer": "A value is assigned to that property",
        "options": ["A value is assigned to that property", "The setter function is explicitly called in the program", "The getter function is unavailable", "Defining an array of computed properties"],
        "learned": false
    }
]
